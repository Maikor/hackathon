---
published: true
date: '2018-06-12 09:51 -0400'
title: 'Step 2: Playing with IOS-XR YANG Models'
author: Akshat Sharma
tags:
  - iosxr
  - cisco
  - clus2018
  - devnet
excerpt: Using ncclient to work with IOS-XR netconf
---


{% include toc %}

## To Know More

There are several tools in the industry that allow you to play around with YANG models on IOS-XR and other Network OS stacks.

In this workshop we will look at two of them:

* The Ansible `netconf_config` module to configure a BGP session on the routers. <https://docs.ansible.com/ansible/2.4/netconf_config_module.html>  

* Yang Development Kit (YDK) to configure Telemetry and interfaces on the routers: <http://ydk.io>
* Your own python Telemetry client which we will use to extract python data coming from YANG paths set up by YDK:
<https://learninglabs.cisco.com/tracks/iosxr-programmability/iosxr-streaming-telemetry/03-iosxr-02-telemetry-python/step/1>



>Connect to your Pod first! Make sure your Anyconnect VPN connection to the Pod assigned to you is active. 
>
> If you haven't connected yet, check out the instructions to do so here: 
><https://iosxr-devnet-ciscolive.github.io/cleur2019-workshop/assets/CLEUR19-IOS-XR-Programmability-Workshop.pdf>
>
>
> Once you're connected, use the following instructions to connect to the individual nodes.
> The instructions in the workshop will simply refer to the Name of the box to connect without
> repeating the connection details and credentials. So refer back to this list when you need it.
>  
>
> The 3 nodes in the topology are: 
> 
><p style="font-size: 16px;"><b>Development Linux System (DevBox)</b></p> 
>      IP Address: 10.10.20.170
>      Username/Password: [admin/admin]
>      SSH Port: 2211
> 
>
><p style="font-size: 16px;"><b>IOS-XRv9000 R1: (Router r1)</b></p> 
>
>     IP Address: 10.10.20.170  
>     Username/Password: [admin/admin]   
>     Management IP: 10.10.20.170  
>     XR SSH Port: 2221    
>     NETCONF Port: 8321   
>     gRPC Port: 57021  
>     XR-Bash SSH Port: 2222    
>
>
><p style="font-size: 16px;"><b>IOS-XRv9000 R2:  (Router r2)</b></p> 
>
>     IP Address: 10.10.20.170   
>     Username/Password: [admin/admin]   
>     Management IP: 10.10.20.170   
>     XR SSH Port: 2231    
>     NETCONF Port: 8331   
>     gRPC Port: 57031    
>     XR-Bash SSH Port: 2232
{: .notice--info}




The topology we will be dealing with looks something like this:

![topology.png]({{site.baseurl}}/images/topology.png)



## Ansible netconf_config module

Hop into the devbox and browse to the ansible directory:


```
AKSHSHAR-M-33WP:~ akshshar$ ssh -p 2211 admin@10.10.20.170
admin@10.10.20.170's password: 
Last login: Tue Jan 29 18:35:38 2019 from 192.168.122.1
admin@devbox:~$ 
admin@devbox:~$ 
admin@devbox:~$ cd iosxr-devnet-cleur2019/
admin@devbox:iosxr-devnet-cleur2019$ ls
ansible  README.md  ztp_hooks
admin@devbox:iosxr-devnet-cleur2019$ cd ansible/
admin@devbox:ansible$ ls
ansible_hosts  configure_bgp_oc_netconf.yml  docker_bringup.yml  execute_python_ztp.yml  openr  set_ipv6_route.sh  xml
admin@devbox:ansible$ 
```

We will be using the playbook: `configure_bgp_oc_netconf.yml` which uses the netconf_config module which in turn utilizes the XML encoded data to configure BGP on routers r1 and r2:

The playbook is dumped below: 

```
admin@devbox:ansible$ 
admin@devbox:ansible$ cat configure_bgp_oc_netconf.yml 
---
- hosts: routers_shell
  connection: local
  gather_facts: no

  tasks:
  - name: set ntp server in the device
    netconf_config:
      host: "{{ ansible_host }}"
      port: "{{ netconf_port }}"
      username: "{{ ansible_user }}"
      password: "{{ ansible_password }}"
      hostkey_verify: no
      xml: "{{ lookup('file', xml_file) }}"
admin@devbox:ansible$ 
admin@devbox:ansible$ 
```  

The xml file used by the above playbook to configure BGP on router r1 is shown below. 
This XML data utilizes the IOS-XR BGP Config YANG model:  `Cisco-IOS-XR-ipv4-bgp-cfg`.


```
admin@devbox:ansible$ cat xml/r1-bgp.xml 
<config>
  <bgp xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg">
   <instance>
    <instance-name>default</instance-name>
    <instance-as>
     <as>0</as>
     <four-byte-as>
      <as>65000</as>
      <bgp-running></bgp-running>
      <default-vrf>
       <global>
        <router-id>50.1.1.1</router-id>
        <global-afs>
         <global-af>
          <af-name>ipv4-unicast</af-name>
          <enable></enable>
         </global-af>
        </global-afs>
       </global>
       <bgp-entity>
        <neighbors>
         <neighbor>
          <neighbor-address>60.1.1.1</neighbor-address>
          <remote-as>
           <as-xx>0</as-xx>
           <as-yy>65000</as-yy>
          </remote-as>
          <update-source-interface>Loopback0</update-source-interface>
          <neighbor-afs>
           <neighbor-af>
            <af-name>ipv4-unicast</af-name>
            <activate></activate>
           </neighbor-af>
          </neighbor-afs>
         </neighbor>
        </neighbors>
       </bgp-entity>
      </default-vrf>
     </four-byte-as>
    </instance-as>
   </instance>
      </bgp>
    </config>
admin@devbox:ansible$ 
```

Similarly, the XML file for router r2:  


```
admin@devbox:ansible$ 
admin@devbox:ansible$ 
admin@devbox:ansible$ cat xml/r2-bgp.xml 
<config>
  <bgp xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg"> 
   <instance> 
    <instance-name>default</instance-name> 
    <instance-as> 
     <as>0</as> 
     <four-byte-as> 
      <as>65000</as> 
      <bgp-running></bgp-running> 
      <default-vrf> 
       <global> 
        <router-id>60.1.1.1</router-id> 
        <global-afs> 
         <global-af> 
          <af-name>ipv4-unicast</af-name> 
          <enable></enable> 
         </global-af> 
        </global-afs> 
       </global> 
       <bgp-entity> 
        <neighbors> 
         <neighbor> 
          <neighbor-address>50.1.1.1</neighbor-address> 
          <remote-as> 
           <as-xx>0</as-xx> 
           <as-yy>65000</as-yy> 
          </remote-as> 
          <update-source-interface>Loopback0</update-source-interface> 
          <neighbor-afs> 
           <neighbor-af> 
            <af-name>ipv4-unicast</af-name> 
            <activate></activate> 
           </neighbor-af> 
          </neighbor-afs> 
         </neighbor> 
        </neighbors> 
       </bgp-entity> 
      </default-vrf> 
     </four-byte-as> 
    </instance-as> 
   </instance> 
  </bgp>
</config>
admin@devbox:ansible$ 
```


### Install ncclient

ncclient is an open source library (<https://pypi.org/project/ncclient/>) that can be used to connect to the netconf subsystem over SSH for multiple different vendor OSes (including IOS-XR).
It then allows the user to pass in XML encoded YANG data to interact with the router OS and manipulate its provisioned state or extract operational data.

The Ansible netconf_config module requires ncclient to be installed on the system. Let's install ncclient first:

```
admin@devbox:ansible$ sudo pip install ncclient
The directory '/home/admin/.cache/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
The directory '/home/admin/.cache/pip' or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
Collecting ncclient
  Downloading https://files.pythonhosted.org/packages/dc/95/acc44c2ff966743fedd1ad991ecf2498f40fd434883c67138b60a6373d49/ncclient-0.6.3.tar.gz (88kB)
    100% |████████████████████████████████| 92kB 598kB/s 
Requirement already satisfied: setuptools>0.6 in /usr/lib/python3/dist-packages (from ncclient) (20.7.0)
Requirement already satisfied: paramiko>=1.15.0 in /usr/local/lib/python3.5/dist-packages (from ncclient) (2.4.2)
Collecting lxml>=3.3.0 (from ncclient)
  Downloading https://files.pythonhosted.org/packages/f0/b6/6423a06e3fd191c5c9bea3cd636a175eb7b0b3e3c8d5c58c4e6bf3b43193/lxml-4.3.0-cp35-cp35m-manylinux1_x86_64.whl (5.6MB)
    100% |████████████████████████████████| 5.6MB 7.5MB/s 
Collecting selectors2>=2.0.1 (from ncclient)
  Downloading https://files.pythonhosted.org/packages/c9/89/8a07d6d6c78422c5151f68453e9741af4cd82bebcfa73923f73b3bdbef0d/selectors2-2.0.1-py2.py3-none-any.whl
Requirement already satisfied: six in /usr/lib/python3/dist-packages (from ncclient) (1.10.0)
Requirement already satisfied: pynacl>=1.0.1 in /usr/local/lib/python3.5/dist-packages (from paramiko>=1.15.0->ncclient) (1.3.0)
Requirement already satisfied: cryptography>=1.5 in /usr/local/lib/python3.5/dist-packages (from paramiko>=1.15.0->ncclient) (2.5)
Requirement already satisfied: pyasn1>=0.1.7 in /usr/local/lib/python3.5/dist-packages (from paramiko>=1.15.0->ncclient) (0.4.5)
Requirement already satisfied: bcrypt>=3.1.3 in /usr/local/lib/python3.5/dist-packages (from paramiko>=1.15.0->ncclient) (3.1.6)
Requirement already satisfied: cffi>=1.4.1 in /usr/local/lib/python3.5/dist-packages (from pynacl>=1.0.1->paramiko>=1.15.0->ncclient) (1.11.5)
Requirement already satisfied: asn1crypto>=0.21.0 in /usr/local/lib/python3.5/dist-packages (from cryptography>=1.5->paramiko>=1.15.0->ncclient) (0.24.0)
Requirement already satisfied: pycparser in /usr/local/lib/python3.5/dist-packages (from cffi>=1.4.1->pynacl>=1.0.1->paramiko>=1.15.0->ncclient) (2.19)
Installing collected packages: lxml, selectors2, ncclient
  Running setup.py install for ncclient ... done
Successfully installed lxml-4.3.0 ncclient-0.6.3 selectors2-2.0.1
You are using pip version 10.0.1, however version 19.0.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
admin@devbox:ansible$ 

```

In the end, you should have a relatively latest version of ncclient installed (version could differ based on when you run this lab): 

```
admin@devbox:ansible$ pip list | grep ncclient
ncclient                0.6.3  
admin@devbox:ansible$
```


### Execute the Ansible playbook to configure BGP

With ncclient installed, execute the Ansible playbook to configure BGP on the two routers:



```
admin@devbox:ansible$ ansible-playbook -i ansible_hosts configure_bgp_oc_netconf.yml 

PLAY [routers_shell] ********************************************************************************************************************

TASK [Configure BGP on the router] ******************************************************************************************************
ok: [r1]
ok: [r2]

PLAY RECAP ******************************************************************************************************************************
r1                         : ok=1    changed=0    unreachable=0    failed=0   
r2                         : ok=1    changed=0    unreachable=0    failed=0   

admin@devbox:ansible$ 

```

### Check the BGP configuration on the routers

Hop over to router r1 and see that BGP has been configured:  


```
AKSHSHAR-M-33WP:~ akshshar$ ssh -p 2221 admin@10.10.20.170


--------------------------------------------------------------------------
  Router 1 (Cisco IOS XR Sandbox)
--------------------------------------------------------------------------


Password: 


RP/0/RP0/CPU0:r1#
RP/0/RP0/CPU0:r1#show run router bgp
Wed Jan 30 04:32:27.173 UTC
router bgp 65000
 bgp router-id 50.1.1.1
 address-family ipv4 unicast
 !
 neighbor 60.1.1.1
  remote-as 65000
  update-source Loopback0
  address-family ipv4 unicast
  !
 !
!

RP/0/RP0/CPU0:r1#


```

Similarly, on router r2:  


```

RP/0/RP0/CPU0:r2#show run router bgp
Wed Jan 30 04:29:24.722 UTC
% No such configuration item(s)

RP/0/RP0/CPU0:r2#show run router bgp
Wed Jan 30 04:32:14.159 UTC
router bgp 65000
 bgp router-id 60.1.1.1
 address-family ipv4 unicast
 !
 neighbor 50.1.1.1
  remote-as 65000
  update-source Loopback0
  address-family ipv4 unicast
  !
 !
!

RP/0/RP0/CPU0:r2#


```


## YDK

To know more about YDK, head over to <http://ydk.io>

### YDK python script to configure Model-Driven Telemetry

YDK-py is already installed in the devbox for you. 

Jump into the `ydk` directory in the clone github repository:  


```
admin@devbox:~$ cd ~/iosxr-devnet-cleur2019/
admin@devbox:iosxr-devnet-cleur2019$ cd ydk/
admin@devbox:ydk$ 
```

>Writing your own python script with YDK to interact with Yang models on IOS-XR and the other Vendor OSes is straightforward and you will find tons of resources in the git repository:
https://github.com/CiscoDevNet/ydk-py-samples with hundreds of examples across different models supported by IOS-XR.
  
The YDK script used for this purpose is shown below:
  
```
admin@devbox:ydk$ cat configure_telemetry_openconfig.py 
#!/usr/bin/env python
#
# Copyright 2016 Cisco Systems, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""
Create configuration for model openconfig-telemetry.

usage: configure_telemetry_openconfig.py [-h] [-v] device

positional arguments:
  device         NETCONF device (ssh://user:password@host:port)

optional arguments:
  -h, --help     show this help message and exit
  -v, --verbose  print debugging messages
"""

from argparse import ArgumentParser
from urlparse import urlparse

from ydk.services import CRUDService
from ydk.providers import NetconfServiceProvider
from ydk.models.openconfig import openconfig_telemetry \
    as oc_telemetry
import logging


def config_telemetry_system(telemetry_system):
    """Add config data to telemetry_system object."""
    #sensor-group
    sensor_group = telemetry_system.sensor_groups.SensorGroup()


    sensor_group.sensor_group_id = "BGPSession"

    sensor_path = sensor_group.sensor_paths.SensorPath()
    sensor_path.path = "Cisco-IOS-XR-ipv4-bgp-oper:bgp/instances/instance/instance-active/default-vrf/sessions"
    sensor_group.sensor_paths.sensor_path.append(sensor_path)
    telemetry_system.sensor_groups.sensor_group.append(sensor_group)

    sensor_path = sensor_group.sensor_paths.SensorPath()
    sensor_path.path = "Cisco-IOS-XR-ipv4-bgp-oper:bgp/instances/instance/instance-active/default-vrf/process-info"
    sensor_group.sensor_paths.sensor_path.append(sensor_path)
    telemetry_system.sensor_groups.sensor_group.append(sensor_group)


    sensor_group = telemetry_system.sensor_groups.SensorGroup()
    sensor_group.sensor_group_id = "IPV6Neighbor"

    sensor_path = sensor_group.sensor_paths.SensorPath()
    sensor_path.path = "Cisco-IOS-XR-ipv6-nd-oper:ipv6-node-discovery/nodes/node/neighbor-interfaces/neighbor-interface/host-addresses/host-address"
    sensor_group.sensor_paths.sensor_path.append(sensor_path)
    telemetry_system.sensor_groups.sensor_group.append(sensor_group)


    #subscription
    subscription = telemetry_system.subscriptions.persistent.Subscription()
    subscription.subscription_id = 1
    sensor_profile = subscription.sensor_profiles.SensorProfile()
    sensor_profile.sensor_group = "BGPSession"
    sensor_profile.config.sensor_group = "BGPSession"
    sensor_profile.config.sample_interval = 15000
    subscription.sensor_profiles.sensor_profile.append(sensor_profile)
    telemetry_system.subscriptions.persistent.subscription.append(subscription)

    subscription = telemetry_system.subscriptions.persistent.Subscription()
    subscription.subscription_id = 2
    sensor_profile = subscription.sensor_profiles.SensorProfile()
    sensor_profile.sensor_group = "IPV6Neighbor"
    sensor_profile.config.sensor_group = "IPV6Neighbor"
    sensor_profile.config.sample_interval = 15000
    subscription.sensor_profiles.sensor_profile.append(sensor_profile)
    telemetry_system.subscriptions.persistent.subscription.append(subscription)

if __name__ == "__main__":
    """Execute main program."""
    parser = ArgumentParser()
    parser.add_argument("-v", "--verbose", help="print debugging messages",
                        action="store_true")
    parser.add_argument("device",
                        help="NETCONF device (ssh://user:password@host:port)")
    args = parser.parse_args()
    device = urlparse(args.device)

    # log debug messages if verbose argument specified
    if args.verbose:
        logger = logging.getLogger("ydk")
        logger.setLevel(logging.INFO)
        handler = logging.StreamHandler()
        formatter = logging.Formatter(("%(asctime)s - %(name)s - "
                                      "%(levelname)s - %(message)s"))
        handler.setFormatter(formatter)
        logger.addHandler(handler)

    # create NETCONF provider
    provider = NetconfServiceProvider(address=device.hostname,
                                      port=device.port,
                                      username=device.username,
                                      password=device.password,
                                      protocol=device.scheme)
    # create CRUD service
    crud = CRUDService()

    telemetry_system = oc_telemetry.TelemetrySystem()  # create object
    config_telemetry_system(telemetry_system)  # add object configuration

    # create configuration on NETCONF device
    crud.create(provider, telemetry_system)

    exit()
# End of script
admin@devbox:ydk$ 


```


### Execute the YDK script:


We intend to configure Model Driven Telemetry on router r1 so that it is ready to stream data associated with BGP Sessions, BGP process and IPv6 neighbor data in the above example.
The Telemetry client we write later will try and receive the BGP session information from the router.  

Execute the YDK script, passing to it the credentials and connection details for Router r1 and its netconf port:

Pass the `-v` option to the script to dump the requests/responses as the script executes.

```
admin@devbox:ydk$ 
admin@devbox:ydk$ ./configure_telemetry_openconfig.py -v ssh://vagrant:vagrant@10.10.20.170:8321
2019-01-29 21:02:48,375 - ydk - INFO - Path where models are to be downloaded: /home/admin/.ydk/10.10.20.170_8321
2019-01-29 21:02:48,386 - ydk - INFO - Connected to 10.10.20.170 on port 8321 using ssh with timeout of -1
2019-01-29 21:02:48,396 - ydk - INFO - Executing CRUD create operation on [openconfig-telemetry:telemetry-system]
2019-01-29 21:02:52,735 - ydk - INFO - =============Generating payload to send to device=============
2019-01-29 21:02:52,735 - ydk - INFO - 
<rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
<edit-config xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <target>
    <candidate/>
  </target>
  <error-option>rollback-on-error</error-option>
  <config><telemetry-system xmlns="http://openconfig.net/yang/telemetry" xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0" nc:operation="merge">
  <sensor-groups>
    <sensor-group>
      <sensor-group-id>BGPSession</sensor-group-id>
      <sensor-paths>
        <sensor-path>
          <path>Cisco-IOS-XR-ipv4-bgp-oper:bgp/instances/instance/instance-active/default-vrf/sessions</path>
        </sensor-path>
        <sensor-path>
          <path>Cisco-IOS-XR-ipv4-bgp-oper:bgp/instances/instance/instance-active/default-vrf/process-info</path>
        </sensor-path>
      </sensor-paths>
    </sensor-group>
    <sensor-group>
      <sensor-group-id>IPV6Neighbor</sensor-group-id>
      <sensor-paths>
        <sensor-path>
          <path>Cisco-IOS-XR-ipv6-nd-oper:ipv6-node-discovery/nodes/node/neighbor-interfaces/neighbor-interface/host-addresses/host-address</path>
        </sensor-path>
      </sensor-paths>
    </sensor-group>
  </sensor-groups>
  <subscriptions>
    <persistent>
      <subscription>
        <subscription-id>1</subscription-id>
        <sensor-profiles>
          <sensor-profile>
            <sensor-group>BGPSession</sensor-group>
            <config>
              <sensor-group>BGPSession</sensor-group>
              <sample-interval>15000</sample-interval>
            </config>
          </sensor-profile>
        </sensor-profiles>
      </subscription>
      <subscription>
        <subscription-id>2</subscription-id>
        <sensor-profiles>
          <sensor-profile>
            <sensor-group>IPV6Neighbor</sensor-group>
            <config>
              <sensor-group>IPV6Neighbor</sensor-group>
              <sample-interval>15000</sample-interval>
            </config>
          </sensor-profile>
        </sensor-profiles>
      </subscription>
    </persistent>
  </subscriptions>
</telemetry-system>
</config>
</edit-config>
</rpc>
2019-01-29 21:02:52,738 - ydk - INFO - 

2019-01-29 21:02:52,789 - ydk - INFO - =============Reply payload received from device=============
2019-01-29 21:02:52,789 - ydk - INFO - 
<?xml version="1.0"?>
<rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="1">
  <ok/>
</rpc-reply>

2019-01-29 21:02:52,791 - ydk - INFO - 

2019-01-29 21:02:52,791 - ydk - INFO - =============Executing commit=============
2019-01-29 21:02:52,791 - ydk - INFO - 
<rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <commit/>
</rpc>

2019-01-29 21:02:53,092 - ydk - INFO - =============Reply payload received from device=============
2019-01-29 21:02:53,092 - ydk - INFO - 
<?xml version="1.0"?>
<rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="2">
  <ok/>
</rpc-reply>

2019-01-29 21:02:53,093 - ydk - INFO - 

2019-01-29 21:02:53,094 - ydk - INFO - Operation succeeded
2019-01-29 21:02:53,094 - ydk - INFO - Disconnected from device
admin@devbox:ydk$ 

```


### Check the Telemetry configuration on router r1


```
AKSHSHAR-M-33WP:~ akshshar$ ssh -p 2221 admin@10.10.20.170


--------------------------------------------------------------------------
  Router 1 (Cisco IOS XR Sandbox)
--------------------------------------------------------------------------


Password: 


RP/0/RP0/CPU0:r1#
RP/0/RP0/CPU0:r1#
RP/0/RP0/CPU0:r1#show  running-config telemetry model-driven 
Wed Jan 30 05:05:03.128 UTC
telemetry model-driven
 sensor-group BGPSession
  sensor-path Cisco-IOS-XR-ipv4-bgp-oper:bgp/instances/instance/instance-active/default-vrf/sessions
  sensor-path Cisco-IOS-XR-ipv4-bgp-oper:bgp/instances/instance/instance-active/default-vrf/process-info
 !
 sensor-group IPV6Neighbor
  sensor-path Cisco-IOS-XR-ipv6-nd-oper:ipv6-node-discovery/nodes/node/neighbor-interfaces/neighbor-interface/host-addresses/host-address
 !
 subscription 1
  sensor-group-id BGPSession sample-interval 15000
 !
 subscription 2
  sensor-group-id IPV6Neighbor sample-interval 15000
 !
!

RP/0/RP0/CPU0:r1#
```



















### Use pyang to dump YANG model

We execute this script to view the YANG model that we will be utilizing. This script interacts with the device using ncclient to fetch the YANG model and then dumps it in a tree format using pyang for easy viewing.


```
vagrant@devbox:ncclient$ 
vagrant@devbox:ncclient$ ./dump_pyang_tree.py 
module: openconfig-telemetry
   +--rw telemetry-system
      +--rw sensor-groups
      |  +--rw sensor-group* [sensor-group-id]
      |     +--rw sensor-group-id    -> ../config/sensor-group-id
      |     +--rw config
      |     |  +--rw sensor-group-id?   string
      |     +--ro state
      |     |  +--ro sensor-group-id?   string
      |     +--rw sensor-paths
      |        +--rw sensor-path* [path]
      |           +--rw path      -> ../config/path
      |           +--rw config
      |           |  +--rw path?             string
      |           |  +--rw exclude-filter?   string
      |           +--ro state
      |              +--ro path?             string
      |              +--ro exclude-filter?   string
      +--rw destination-groups
      |  +--rw destination-group* [group-id]
      |     +--rw group-id        -> ../config/group-id
      |     +--rw config
      |     |  +--rw group-id?   string
      |     +--ro state
      |     |  +--ro group-id?   string
      |     +--rw destinations
      |        +--rw destination* [destination-address destination-port]
      |           +--rw destination-address    -> ../config/destination-address
      |           +--rw destination-port       -> ../config/destination-port
      |           +--rw config
      |           |  +--rw destination-address?    inet:ip-address
      |           |  +--rw destination-port?       uint16
      |           |  +--rw destination-protocol?   telemetry-stream-protocol
      |           +--ro state
      |              +--ro destination-address?    inet:ip-address
      |              +--ro destination-port?       uint16
      |              +--ro destination-protocol?   telemetry-stream-protocol
      +--rw subscriptions
         +--rw persistent
         |  +--rw subscription* [subscription-id]
         |     +--rw subscription-id       -> ../config/subscription-id
         |     +--rw config
         |     |  +--rw subscription-id?          uint64
         |     |  +--rw local-source-address?     inet:ip-address
         |     |  +--rw originated-qos-marking?   inet:dscp
         |     +--ro state
         |     |  +--ro subscription-id?          uint64
         |     |  +--ro local-source-address?     inet:ip-address
         |     |  +--ro originated-qos-marking?   inet:dscp
         |     +--rw sensor-profiles
         |     |  +--rw sensor-profile* [sensor-group]
         |     |     +--rw sensor-group    -> ../config/sensor-group
         |     |     +--rw config
         |     |     |  +--rw sensor-group?         -> /telemetry-system/sensor-groups/sensor-group/config/sensor-group-id
         |     |     |  +--rw sample-interval?      uint64
         |     |     |  +--rw heartbeat-interval?   uint64
         |     |     |  +--rw suppress-redundant?   boolean
         |     |     +--ro state
         |     |        +--ro sensor-group?         -> /telemetry-system/sensor-groups/sensor-group/config/sensor-group-id
         |     |        +--ro sample-interval?      uint64
         |     |        +--ro heartbeat-interval?   uint64
         |     |        +--ro suppress-redundant?   boolean
         |     +--rw destination-groups
         |        +--rw destination-group* [group-id]
         |           +--rw group-id    -> ../config/group-id
         |           +--rw config
         |           |  +--rw group-id?   -> ../../../../../../../destination-groups/destination-group/group-id
         |           +--rw state
         |              +--rw group-id?   -> ../../../../../../../destination-groups/destination-group/group-id
         +--rw dynamic
            +--ro subscription* [subscription-id]
               +--ro subscription-id    -> ../state/subscription-id
               +--ro state
               |  +--ro subscription-id?          uint64
               |  +--ro destination-address?      inet:ip-address
               |  +--ro destination-port?         uint16
               |  +--ro destination-protocol?     telemetry-stream-protocol
               |  +--ro sample-interval?          uint64
               |  +--ro heartbeat-interval?       uint64
               |  +--ro suppress-redundant?       boolean
               |  +--ro originated-qos-marking?   inet:dscp
               +--ro sensor-paths
                  +--ro sensor-path* [path]
                     +--ro path     -> ../state/path
                     +--ro state
                        +--ro path?             string
                        +--ro exclude-filter?   string

vagrant@devbox:ncclient$ 

```



## Use Openconfig Telemetry YANG model to configure Telemetry


### View the Model

The model we intend to use can be viewed in the configure_telemetry.py file before we execute it.

```
#!/usr/bin/env python

from ncclient import manager
import re
from subprocess import Popen, PIPE, STDOUT
    
xr = manager.connect(host='20.1.1.10', port=830, username='vagrant', password='vagrant',
	allow_agent=False,
	look_for_keys=False,
	hostkey_verify=False,
	unknown_host_cb=True)


edit_data = '''
<config>
  <telemetry-system xmlns="http://openconfig.net/yang/telemetry">
   <sensor-groups>
    <sensor-group>
     <sensor-group-id>IPV6Neighbor</sensor-group-id>
     <sensor-paths nc:operation="replace">
      <sensor-path>
       <path>Cisco-IOS-XR-ipv6-nd-oper:ipv6-node-discovery/nodes/node/neighbor-interfaces/neighbor-interface/host-addresses/host-address</path>
      </sensor-path>
     </sensor-paths>
    </sensor-group>
   </sensor-groups>
   <subscriptions>
    <persistent>
     <subscription>
      <subscription-id>IPV6</subscription-id>
      <config>
       <subscription-id>IPV6</subscription-id>
      </config>
      <sensor-profiles>
       <sensor-profile>
        <sensor-group>IPV6Neighbor</sensor-group>
        <config>
         <sensor-group>IPV6Neighbor</sensor-group>
         <sample-interval>10000</sample-interval>
        </config>
       </sensor-profile>
      </sensor-profiles>
     </subscription>
    </persistent>
   </subscriptions>
  </telemetry-system>
</config>
'''


xr.edit_config(edit_data, default_operation='replace', target='candidate', format='xml')
xr.commit()


```


### Execute the ncclient script

```
vagrant@devbox:ncclient$ 
vagrant@devbox:ncclient$ ./configure-telemetry.py 
vagrant@devbox:ncclient$ 

```


### ssh into rtr1 to see the resulting configuration


Use `vagrant port rtr1` in the Pod's shell to determine the port being utilized for rtr1's ssh port (22):

```


```

```
cisco@pod2:~/topology$ ssh -p 2223 vagrant@localhost
The authenticity of host '[localhost]:2223 ([127.0.0.1]:2223)' can't be established.
RSA key fingerprint is SHA256:IhWg/fJ3DmarPxUK+AvUcKJ9sgW4D2U4y+gqrtmtOpc.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[localhost]:2223' (RSA) to the list of known hosts.
Password: 


RP/0/RP0/CPU0:rtr1#
RP/0/RP0/CPU0:rtr1#
RP/0/RP0/CPU0:rtr1#
RP/0/RP0/CPU0:rtr1#   
RP/0/RP0/CPU0:rtr1#show  running-config  telemetry model-driven 
Tue Jun 12 04:47:56.149 UTC
telemetry model-driven
 sensor-group IPV6Neighbor
  sensor-path Cisco-IOS-XR-ipv6-nd-oper:ipv6-node-discovery/nodes/node/neighbor-interfaces/neighbor-interface/host-addresses/host-address
 !
 subscription IPV6
  sensor-group-id IPV6Neighbor sample-interval 10000
 !
!

RP/0/RP0/CPU0:rtr1#

```

### Check that the telemetry stream is ready to go


In the rtr1 CLI, restart the emsd process to help resolve the sensor-path we just configured earlier.

```

RP/0/RP0/CPU0:rtr1#
RP/0/RP0/CPU0:rtr1#
RP/0/RP0/CPU0:rtr1#process restart emsd
Tue Jun 12 04:53:03.547 UTC
RP/0/RP0/CPU0:rtr1#

```

Now check the telemetry subscription state to make sure the sensor-path is resolved.

```
RP/0/RP0/CPU0:rtr1#
RP/0/RP0/CPU0:rtr1#show telemetry model-driven subscription IPV6 
Tue Jun 12 04:54:48.409 UTC
Subscription:  IPV6
-------------
  State:       NA
  Sensor groups:
  Id: IPV6Neighbor
    Sample Interval:      10000 ms
    Sensor Path:          Cisco-IOS-XR-ipv6-nd-oper:ipv6-node-discovery/nodes/node/neighbor-interfaces/neighbor-interface/host-addresses/host-address
    Sensor Path State:    Resolved

  Collection Groups:
  ------------------
  No active collection groups

RP/0/RP0/CPU0:rtr1#
```

Excellent! We're good to go.
{: .notice--success}
