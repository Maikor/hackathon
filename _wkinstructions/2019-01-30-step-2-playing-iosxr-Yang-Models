---
published: true
date: '2018-06-12 09:51 -0400'
title: 'Step 2: Playing with IOS-XR YANG Models'
author: Akshat Sharma
tags:
  - iosxr
  - cisco
  - clus2018
  - devnet
excerpt: Using ncclient to work with IOS-XR netconf
---


{% include toc %}

## To Know More

There are several tools in the industry that allow you to play around with YANG models on IOS-XR and other Network OS stacks.

In this workshop we will look at two of them:

* The Ansible `netconf_config` module to configure a BGP session on the routers. <https://docs.ansible.com/ansible/2.4/netconf_config_module.html>  

* Yang Development Kit (YDK) to configure Telemetry and interfaces on the routers: <http://ydk.io>
* Your own python Telemetry client which we will use to extract python data coming from YANG paths set up by YDK:
<https://learninglabs.cisco.com/tracks/iosxr-programmability/iosxr-streaming-telemetry/03-iosxr-02-telemetry-python/step/1>

     
     


## Ansible netconf_config module

Hop into the devbox and browse to the ansible directory:


```
AKSHSHAR-M-33WP:~ akshshar$ ssh -p 2211 admin@10.10.20.170
admin@10.10.20.170's password: 
Last login: Tue Jan 29 18:35:38 2019 from 192.168.122.1
admin@devbox:~$ 
admin@devbox:~$ 
admin@devbox:~$ cd iosxr-devnet-cleur2019/
admin@devbox:iosxr-devnet-cleur2019$ ls
ansible  README.md  ztp_hooks
admin@devbox:iosxr-devnet-cleur2019$ cd ansible/
admin@devbox:ansible$ ls
ansible_hosts  configure_bgp_oc_netconf.yml  docker_bringup.yml  execute_python_ztp.yml  openr  set_ipv6_route.sh  xml
admin@devbox:ansible$ 
```

We will be using the playbook: `configure_bgp_oc_netconf.yml` which uses the netconf_config module which in turn utilizes the XML encoded data to configure BGP on routers r1 and r2:

The playbook is dumped below: 

```
admin@devbox:ansible$ 
admin@devbox:ansible$ cat configure_bgp_oc_netconf.yml 
---
- hosts: routers_shell
  connection: local
  gather_facts: no

  tasks:
  - name: set ntp server in the device
    netconf_config:
      host: "{{ ansible_host }}"
      port: "{{ netconf_port }}"
      username: "{{ ansible_user }}"
      password: "{{ ansible_password }}"
      hostkey_verify: no
      xml: "{{ lookup('file', xml_file) }}"
admin@devbox:ansible$ 
admin@devbox:ansible$ 
```  

The xml file used by the above playbook to configure BGP on router r1 is shown below. 
This XML data utilizes the IOS-XR BGP Config YANG model:  `Cisco-IOS-XR-ipv4-bgp-cfg`.


```
admin@devbox:ansible$ cat xml/r1-bgp.xml 
<config>
  <bgp xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg">
   <instance>
    <instance-name>default</instance-name>
    <instance-as>
     <as>0</as>
     <four-byte-as>
      <as>65000</as>
      <bgp-running></bgp-running>
      <default-vrf>
       <global>
        <router-id>50.1.1.1</router-id>
        <global-afs>
         <global-af>
          <af-name>ipv4-unicast</af-name>
          <enable></enable>
         </global-af>
        </global-afs>
       </global>
       <bgp-entity>
        <neighbors>
         <neighbor>
          <neighbor-address>60.1.1.1</neighbor-address>
          <remote-as>
           <as-xx>0</as-xx>
           <as-yy>65000</as-yy>
          </remote-as>
          <update-source-interface>Loopback0</update-source-interface>
          <neighbor-afs>
           <neighbor-af>
            <af-name>ipv4-unicast</af-name>
            <activate></activate>
           </neighbor-af>
          </neighbor-afs>
         </neighbor>
        </neighbors>
       </bgp-entity>
      </default-vrf>
     </four-byte-as>
    </instance-as>
   </instance>
      </bgp>
    </config>
admin@devbox:ansible$ 
```

Similarly, the XML file for router r2:  


```
admin@devbox:ansible$ 
admin@devbox:ansible$ 
admin@devbox:ansible$ cat xml/r2-bgp.xml 
<config>
  <bgp xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg"> 
   <instance> 
    <instance-name>default</instance-name> 
    <instance-as> 
     <as>0</as> 
     <four-byte-as> 
      <as>65000</as> 
      <bgp-running></bgp-running> 
      <default-vrf> 
       <global> 
        <router-id>60.1.1.1</router-id> 
        <global-afs> 
         <global-af> 
          <af-name>ipv4-unicast</af-name> 
          <enable></enable> 
         </global-af> 
        </global-afs> 
       </global> 
       <bgp-entity> 
        <neighbors> 
         <neighbor> 
          <neighbor-address>50.1.1.1</neighbor-address> 
          <remote-as> 
           <as-xx>0</as-xx> 
           <as-yy>65000</as-yy> 
          </remote-as> 
          <update-source-interface>Loopback0</update-source-interface> 
          <neighbor-afs> 
           <neighbor-af> 
            <af-name>ipv4-unicast</af-name> 
            <activate></activate> 
           </neighbor-af> 
          </neighbor-afs> 
         </neighbor> 
        </neighbors> 
       </bgp-entity> 
      </default-vrf> 
     </four-byte-as> 
    </instance-as> 
   </instance> 
  </bgp>
</config>
admin@devbox:ansible$ 
```









